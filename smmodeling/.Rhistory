library(smmodeling)
pit1 <- read.soilmoisture("../data/prepared-csv/pit1.smooth.csv")
depths <- c("X5cm", "X15cm", "X30cm", "rainfall")
#remove bad data
pit1 <- replace.negative(pit1, depths)
#remove NULL values
pit1 <- drop.na(pit1, depths)
#sample the data set at 20 minutes
pit1.sampled <- pit1[seq(1, nrow(pit1), 10), ]
existing.awi.predicted = existing.awi.predict(pit1.sampled, "X5cm", 0.01, 1 )
existing.awi.predicted = existing.awi.predict(pit1.sampled, "X5cm", 0.01, 1 )
library(smmodeling)
pit1 <- read.soilmoisture("../data/prepared-csv/pit1.smooth.csv")
depths <- c("X5cm", "X15cm", "X30cm", "rainfall")
#remove bad data
pit1 <- replace.negative(pit1, depths)
#remove NULL values
pit1 <- drop.na(pit1, depths)
#sample the data set at 20 minutes
pit1.sampled <- pit1[seq(1, nrow(pit1), 10), ]
existing.awi.predicted = existing.awi.predict(pit1.sampled, "X5cm", 0.01, 1 )
plot(existing.awi.predicted,type='l')
max(existing.awi.predicted)
min(existing.awi.predicted)
library(smmodeling)
#read in the data
pit1 <- read.soilmoisture("../data/prepared-csv/pit1.smooth.csv")
#sample the data set at 20 minutes
pit1.sampled <- pit1[seq(1, nrow(pit1), 10), ]
depths <- c("X5cm", "X15cm", "X30cm", "rainfall")
#remove bad data
pit1.sampled <- replace.negative(pit1.sampled, depths)
#remove NULL values
pit1.sampled <- drop.na(pit1.sampled, depths)
existing.awi.predicted = existing.awi.predict(pit1.sampled, "X5cm", 0.01, 1 )
library(smmodeling)
#read in the data
pit1 <- read.soilmoisture("../data/prepared-csv/pit1.smooth.csv")
#sample the data set at 20 minutes
pit1.sampled <- pit1[seq(1, nrow(pit1), 10), ]
depths <- c("X5cm", "X15cm", "X30cm", "rainfall")
#remove bad data
pit1.sampled <- replace.negative(pit1.sampled, depths)
#remove NULL values
pit1.sampled <- drop.na(pit1.sampled, depths)
existing.awi.predicted = existing.awi.predict(pit1.sampled, "X5cm", 0.01, 1 )
max(existing.awi.predicted)
plot(existing.awi.predicted,type='l')
plot(pit1.sampled,type='l')
dev.off()
plot(pit1.sampled,type='l')
str(pit1.sampled)
plot(pit1.sampled$X5cm,type='l')
length(pit1.sampled$X5cm)
length(existing.awi.predicted)
existing.awi.predicted = existing.awi.predict(pit1.sampled, "X5cm", 0.0001, 1 )
plot(pit1.sampled$X5cm,type='l')
plot(existing.awi.predicted,type='l')
existing.awi.predicted = existing.awi.predict(pit1.sampled, "X5cm", 0, 1 )
plot(existing.awi.predicted,type='l')
library(smmodeling)
pit1 <- read.soilmoisture("../data/prepared-csv/pit1.smooth.csv")
#sample the data set at 20 minutes
pit1.sampled <- pit1[seq(1, nrow(pit1), 10), ]
depths <- c("X5cm", "X15cm", "X30cm", "rainfall")
#remove bad data
pit1.sampled <- replace.negative(pit1.sampled, depths)
#remove NULL values
pit1.sampled <- drop.na(pit1.sampled, depths)
existing.awi.predicted = existing.awi.predict(pit1.sampled, "X5cm", 0.01, 1 )
plot(existing.awi.predicted,type='l')
pit1 <- read.soilmoisture("../data/prepared-csv/pit1.smooth.csv")
#sample the data set at 20 minutes
pit1.sampled <- pit1[seq(1, nrow(pit1), 10), ]
depths <- c("X5cm", "X15cm", "X30cm", "rainfall")
#remove bad data
pit1.sampled <- replace.negative(pit1.sampled, depths)
#remove NULL values
pit1.sampled <- drop.na(pit1.sampled, depths)
existing.awi.predicted = existing.awi.predict(pit1.sampled, "X5cm", 0.00001, 1 )
plot(existing.awi.predicted,type='l')
a=pit1.sampled[["X5cm"]]
a[1]
a[10]
a[[10]]
a[[111]]
a[111]
a[111] *exp(1)
a[111] *exp(0)
a[111] *exp(-0)
existing.awi.predicted = existing.awi.predict(pit1.sampled, "X5cm", 0.01, 1 )
existing.awi.predicted = existing.awi.predict(pit1.sampled, "X5cm", 0.00001, 1 )
plot(existing.awi.predicted,type='l')
library(smmodeling)
pit1 <- read.soilmoisture("../data/prepared-csv/pit1.smooth.csv")
#sample the data set at 20 minutes
pit1.sampled <- pit1[seq(1, nrow(pit1), 10), ]
depths <- c("X5cm", "X15cm", "X30cm", "rainfall")
#remove bad data
pit1.sampled <- replace.negative(pit1.sampled, depths)
#remove NULL values
pit1.sampled <- drop.na(pit1.sampled, depths)
existing.awi.predicted = existing.awi.predict(pit1.sampled, "X5cm", 0.0001, 1 )
plot(existing.awi.predicted,type='l')
str(pit1.sampled)
